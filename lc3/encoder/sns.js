//
//  Copyright 2021 - 2023 XiaoJSoft Studio. All rights reserved.
//  Use of this source code is governed by a BSD-style license that can be
//  found in the LICENSE.md file.
//

//
//  Imports.
//

//  Imported modules.
const Lc3Nms = 
    require("./../common/nms");
const Lc3Fs = 
    require("./../common/fs");
const Lc3TblIfs = 
    require("./../tables/i");
const Lc3TblNB = 
    require("./../tables/nb");
const Lc3TblNF = 
    require("./../tables/nf");
const Lc3TblSns = 
    require("./../tables/sns");
const Lc3Dct2_16 = 
    require("./../math/dct2-16");
const Lc3Pvq = 
    require("./../math/pvq");
const Lc3Mpvq = 
    require("./../math/mpvq");
const Lc3Error = 
    require("./../error");

//  Imported classes.
const LC3FrameDuration = 
    Lc3Nms.LC3FrameDuration;
const LC3SampleRate = 
    Lc3Fs.LC3SampleRate;
const LC3BugError = 
    Lc3Error.LC3BugError;
const LC3IllegalParameterError = 
    Lc3Error.LC3IllegalParameterError;
const MPVQ = 
    Lc3Mpvq.MPVQ;

//  Imported functions.
const PVQSearch = 
    Lc3Pvq.PVQSearch;
const PVQNormalize = 
    Lc3Pvq.PVQNormalize;
const DCTIIForward_16 = 
    Lc3Dct2_16.DCTIIForward_16;
const DCTIIInverse_16 = 
    Lc3Dct2_16.DCTIIInverse_16;

//  Imported constants.
const I_TBL = 
    Lc3TblIfs.I_TBL;
const NF_TBL = 
    Lc3TblNF.NF_TBL;
const NB_TBL = 
    Lc3TblNB.NB_TBL;
const HFCB = 
    Lc3TblSns.HFCB;
const LFCB = 
    Lc3TblSns.LFCB;
const GIJ = 
    Lc3TblSns.GIJ;

//
//  Constants.
//

//  Pre-emphasis factors (Eq. 21).
//  PEFACTOR[Fs][b] = 10 ^ (b * gtilt / 630) (0 <= b < 64) (Eq. 21, Table 3.7).
const PEFACTORS = [
    [
        //  gtilt = 14
        1.00000000000000000000, 1.05250028527773298315, 1.10775685050970906786, 1.16591440117983169422, 
        1.22712523985119004166, 1.29154966501488388531, 1.35935639087852555562, 1.43072298919375762161, 
        1.50583635427984052768, 1.58489319246111359796, 1.66810053720005879718, 1.75567629127500124397, 
        1.84784979742229094057, 1.94486243893736210353, 2.04696827180752105590, 2.15443469003188381450, 
        2.26754312587080164576, 2.38658978685858080837, 2.51188643150958013095, 2.64376118574909968473, 
        2.78255940220712449928, 2.92864456462523659042, 3.08239923974514340443, 3.24422607917162997282, 
        3.41454887383360183861, 3.59381366380462763388, 3.78248990638938398234, 3.98107170553497224930, 
        4.19007910578666908918, 4.41005945417673750342, 4.64158883361277840862, 4.88527357151938890212, 
        5.14175182768392602384, 5.41169526546463597327, 5.69581081073768658030, 5.99484250318941036539, 
        6.30957344480193338399, 6.64082785063484148935, 6.98947320727348486713, 7.35642254459641353748, 
        7.74263682681126930163, 8.14912746902074225375, 8.57695898590894145741, 9.02725177948457613297, 
        9.50118507318143556972, 10.0000000000000000000, 10.5250028527773267228, 11.0775685050970924550, 
        11.6591440117983182745, 12.2712523985118977521, 12.9154966501488406294, 13.5935639087852564444, 
        14.3072298919375722193, 15.0583635427984070532, 15.8489319246111328710, 16.6810053720005910805, 
        17.5567629127500133279, 18.4784979742229076294, 19.4486243893736272526, 20.4696827180752123354, 
        21.5443469003188354804, 22.6754312587080200103, 23.8658978685858080837, 25.1188643150957950922
    ],
    [
        //  gtilt = 18
        1.00000000000000000000, 1.06800043251457577043, 1.14062492385132085992, 1.21818791201011555891, 
        1.30102521691083139466, 1.38949549437313768507, 1.48398178896756505196, 1.58489319246111359796, 
        1.69266661503787574361, 1.80776867696343424008, 1.93069772888325008608, 2.06198600950221999639, 
        2.20220194998737550662, 2.35195263507095875255, 2.51188643150958013095, 2.68269579527972545918, 
        2.86512026966378074988, 3.05994968720719562327, 3.26802758941012516658, 3.49025487895957997608, 
        3.72759372031493985133, 3.98107170553497224930, 4.25178630338289043067, 4.54090961097247625133, 
        4.84969342852819806922, 5.17947467923121074307, 5.53168119761722731909, 5.90783791158794535647, 
        6.30957344480193338399, 6.73862716803094663476, 7.19685673001151915429, 7.68624610039773781267, 
        8.20891415963825465951, 8.76712387296868200792, 9.36329208823941527839, 10.0000000000000000000, 
        10.6800043251457541515, 11.4062492385132081552, 12.1818791201011542569, 13.0102521691083161670, 
        13.8949549437313741862, 14.8398178896756540723, 15.8489319246111328710, 16.9266661503787609888, 
        18.0776867696343401803, 19.3069772888325061899, 20.6198600950222044048, 22.0220194998737461844, 
        23.5195263507095901900, 25.1188643150957950922, 26.8269579527972581445, 28.6512026966378030579, 
        30.5994968720719597854, 32.6802758941012498894, 34.9025487895958121953, 37.2759372031493967370, 
        39.8107170553497340393, 42.5178630338289025303, 45.4090961097247713951, 48.4969342852819806922, 
        51.7947467923120967725, 55.3168119761722749672, 59.0783791158794358012, 63.0957344480193285108
    ],
    [
        //  gtilt = 22
        1.00000000000000000000, 1.08372885005948838000, 1.17446822045126086920, 1.27280509398105845520, 
        1.37937560084995136656, 1.49486913370923346633, 1.62003280726413101398, 1.75567629127500124397, 
        1.90267704822016447963, 2.06198600950221999639, 2.23463372691659412084, 2.42173703917546934150, 
        2.62450629661210133037, 2.84425319080131844274, 3.08239923974514340443, 3.34048498351324507638, 
        3.62017994982379764934, 3.92329345403096008127, 4.25178630338289043067, 4.60778348126382208960, 
        4.99358789347314768747, 5.41169526546463597327, 5.86481028691436812039, 6.35586410805476553776, 
        6.88803330095656640708, 7.46476040841712062957, 8.08977621338348207303, 8.76712387296868200792, 
        9.50118507318143556972, 10.2967083735612927597, 11.1588399250774870097, 12.0931567600021274700, 
        13.1057028691062349424, 14.2030282995578325256, 15.3922315264421811776, 16.6810053720005910805, 
        18.0776867696343401803, 19.5913106945914563539, 21.2316686102077483156, 23.0093718077845785785, 
        24.9359200498415845004, 27.0237759607901608661, 29.2864456462523570224, 31.7385660625427838966, 
        34.3959997014965992435, 37.2759372031493967370, 40.3970085600588078023, 43.7794036326358195765, 
        47.4450027550866124670, 51.4175182768392531329, 55.7226479550717357370, 60.3882411906195670781, 
        65.4444791826251872635, 70.9240701673285229845, 76.8624610039773870085, 83.2980664765826759321, 
        90.2725177948457400134, 97.8309319017828897813, 106.022203330167243962, 114.899320495775356221, 
        124.519708473503314394, 134.945600473732440605, 146.244440421985132161, 158.489319246111421080
    ],
    [
        //  gtilt = 26
        1.00000000000000000000, 1.09968889964399152426, 1.20931567600021283582, 1.32987102506290399972, 
        1.46244440421985189005, 1.60823387766704151147, 1.76855694330185864160, 1.94486243893736210353, 
        2.13874363543395729081, 2.35195263507095875255, 2.58641620527596893808, 2.84425319080131844274, 
        3.12779366170121386759, 3.43959997014965868090, 3.78248990638938398234, 4.15956216307184689640, 
        4.57422433810926065689, 5.03022372910013793046, 5.53168119761722731909, 6.08312840938904564325, 
        6.68954878691414300818, 7.35642254459641353748, 8.08977621338348207303, 8.89623710246181609307, 
        9.78309319017828826759, 10.7583589854217898107, 11.8308479546535352256, 13.0102521691083161670, 
        14.3072298919375722193, 15.7335018968184563448, 17.3019573884589448198, 19.0267704822016376909, 
        20.9235282953511010362, 23.0093718077845785785, 25.3031507648020976831, 27.8255940220712432165, 
        30.5994968720719597854, 33.6499270449085656765, 37.0044512451160940714, 40.6933842716714622156, 
        44.7500629725044873908, 49.2111475092327950165, 54.1169526546463757199, 59.5118121168740401572, 
        65.4444791826251872635, 71.9685673001152110828, 79.1430345832182240429, 87.0327166153056310804, 
        95.7089123677127986412, 105.250028527773267228, 115.742288059205776563, 127.280509398105863283, 
        139.968963326129710367, 153.922315264421740721, 169.266661503787616994, 186.140668735512122112, 
        204.696827180751995456, 225.102828643017630839, 247.543081937189924702, 272.220379389990739583, 
        299.357729472049072683, 329.200372123041177019, 362.017994982379605062, 398.107170553497326182
    ],
    [
        //  gtilt = 30
        1.00000000000000000000, 1.11588399250774839011, 1.24519708473503287749, 1.38949549437313768507, 
        1.55051577983262456328, 1.73019573884589417112, 1.93069772888325008608, 2.15443469003188381450, 
        2.40409918350997164893, 2.68269579527972545918, 2.99357729472048994523, 3.34048498351324507638, 
        3.72759372031493985133, 4.15956216307184689640, 4.64158883361277840862, 5.17947467923121074307, 
        5.77969288415331305941, 6.44946677103762411321, 7.19685673001151915429, 8.03085722139151414467, 
        8.96150501946604549630, 10.0000000000000000000, 11.1588399250774870097, 12.4519708473503314394, 
        13.8949549437313741862, 15.5051577983262447447, 17.3019573884589448198, 19.3069772888325061899, 
        21.5443469003188354804, 24.0409918350997173775, 26.8269579527972581445, 29.9357729472049030051, 
        33.4048498351324454347, 37.2759372031493967370, 41.5956216307184689640, 46.4158883361277929680, 
        51.7947467923120967725, 57.7969288415331305941, 64.4946677103762340266, 71.9685673001152110828, 
        80.3085722139151272359, 89.6150501946604549630, 100.000000000000000000, 111.588399250774799043, 
        124.519708473503314394, 138.949549437313748967, 155.051577983262546923, 173.019573884589448198, 
        193.069772888324962423, 215.443469003188454280, 240.409918350997173775, 268.269579527972439337, 
        299.357729472049072683, 334.048498351324440137, 372.759372031494194744, 415.956216307184718062, 
        464.158883361277730728, 517.947467923121280364, 577.969288415331334363, 644.946677103761999206, 
        719.685673001152053985, 803.085722139151243937, 896.150501946605004377, 1000.00000000000000000
    ],
    [
        //  gtilt = 30
        1.00000000000000000000, 1.11588399250774839011, 1.24519708473503287749, 1.38949549437313768507, 
        1.55051577983262456328, 1.73019573884589417112, 1.93069772888325008608, 2.15443469003188381450, 
        2.40409918350997164893, 2.68269579527972545918, 2.99357729472048994523, 3.34048498351324507638, 
        3.72759372031493985133, 4.15956216307184689640, 4.64158883361277840862, 5.17947467923121074307, 
        5.77969288415331305941, 6.44946677103762411321, 7.19685673001151915429, 8.03085722139151414467, 
        8.96150501946604549630, 10.0000000000000000000, 11.1588399250774870097, 12.4519708473503314394, 
        13.8949549437313741862, 15.5051577983262447447, 17.3019573884589448198, 19.3069772888325061899, 
        21.5443469003188354804, 24.0409918350997173775, 26.8269579527972581445, 29.9357729472049030051, 
        33.4048498351324454347, 37.2759372031493967370, 41.5956216307184689640, 46.4158883361277929680, 
        51.7947467923120967725, 57.7969288415331305941, 64.4946677103762340266, 71.9685673001152110828, 
        80.3085722139151272359, 89.6150501946604549630, 100.000000000000000000, 111.588399250774799043, 
        124.519708473503314394, 138.949549437313748967, 155.051577983262546923, 173.019573884589448198, 
        193.069772888324962423, 215.443469003188454280, 240.409918350997173775, 268.269579527972439337, 
        299.357729472049072683, 334.048498351324440137, 372.759372031494194744, 415.956216307184718062, 
        464.158883361277730728, 517.947467923121280364, 577.969288415331334363, 644.946677103761999206, 
        719.685673001152053985, 803.085722139151243937, 896.150501946605004377, 1000.00000000000000000
    ]
];

//  fatt table.
const FATT_TBL = [
    0.5, 0.3
];

//  Minimum noise floor (= 2 ^ -32, Eq. 23).
const NSFLOOR_MIN = 2.3283064365386963e-10;

//  MPVQ(16, 10).
const MPVQ_16x10 = new MPVQ(16, 10);

//
//  Public classes.
//

/**
 *  LC3 spectral noise shaping encoder.
 * 
 *  @constructor
 *  @param {InstanceType<typeof LC3FrameDuration>} Nms 
 *    - The frame duration.
 *  @param {InstanceType<typeof LC3SampleRate>} Fs 
 *    - The sample rate.
 */
function LC3SpectralNoiseShapingEncoder(Nms, Fs) {
    //
    //  Members.
    //

    //  Internal index of Nms, Fs.
    let index_Nms = Nms.getInternalIndex();
    let index_Fs = Fs.getInternalIndex();

    //  Table lookup.
    let NF = NF_TBL[index_Nms][index_Fs];
    let Ifs = I_TBL[index_Nms][index_Fs];
    let NB = NB_TBL[index_Nms][index_Fs];
    let pefactors = PEFACTORS[index_Fs];
    let fatt = FATT_TBL[index_Nms];

    //  Algorithm contexts.
    let EB2 = new Array(64);
    let E64 = new Array(64);
    let E4 = new Array(16);

    let scf0 = new Array(16);
    let scf1 = new Array(16);

    let t2rot = new Array(16);
    let t2rot_setA = new Array(10);
    let t2rot_setB = new Array(6);

    let pvq_cache_s = new Array(16);

    let sns_y0_setA = new Array(10);
    let sns_y0_setB = new Array(6);
    let sns_y0 = new Array(16);
    // let sns_y1_setA = new Array(10);
    let sns_y1 = new Array(16);
    let sns_y2 = new Array(16);
    let sns_y3 = new Array(16);

    let sns_xq0 = new Array(16);
    let sns_xq1 = new Array(16);
    let sns_xq2 = new Array(16);
    let sns_xq3 = new Array(16);

    let sns_xq = [
        sns_xq0, sns_xq1, sns_xq2, sns_xq3
    ];

    let mpvq_enum_cache = [0, 0];

    let ind_LF = -1;
    let ind_HF = -1;

    let st1 = new Array(16);
    let r1 = new Array(16);
    for (let n = 0; n < 16; ++n) {
        st1[n] = 0;
        r1[n] = 0;
    }

    let scfQ = new Array(16);
    let scfQint = new Array(64);
    let scfQint_tmp = new Array(64);

    let idxA = -1, LS_indA = -1;

    let gsns = new Array(64);

    let index_joint = 0;

    let Xs = new Array(NF);
    for (let n = 0; n < NF; ++n) {
        Xs[n] = 0;
    }

    let shape_j = -1, gain_i = -1;

    //
    //  Public methods.
    //

    /**
     *  Update with one frame.
     * 
     *  @param {Number[]} EB 
     *    - The spectral energy band estimation.
     *  @param {Number[]} X 
     *    - The spectral coefficients.
     *  @param {Number} Fatt_k
     *    - The attack flag.
     */
    this.update = function(EB, X, Fatt_k) {
        //  Padding (3.3.7.2.1).
        if (NB < 64) {
            let i = 0, j = 0;
            for (let iEnd = 64 - NB; i < iEnd; ++i, j += 2) {
                let EBi = EB[i];
                EB2[j] = EBi;
                EB2[j + 1] = EBi;
            }
            for (; j < 64; ++i, ++j) {
                EB2[j] = EB[i];
            }
            EB = EB2;
        }

        //  Smoothing (3.3.7.2.2).
        {
            //  Eq. 20
            E64[ 0] = 0.75 * EB[ 0] + 0.25 * EB[ 1];
            E64[ 1] = 0.25 * EB[ 0] + 0.50 * EB[ 1] + 0.25 * EB[ 2];
            E64[ 2] = 0.25 * EB[ 1] + 0.50 * EB[ 2] + 0.25 * EB[ 3];
            E64[ 3] = 0.25 * EB[ 2] + 0.50 * EB[ 3] + 0.25 * EB[ 4];
            E64[ 4] = 0.25 * EB[ 3] + 0.50 * EB[ 4] + 0.25 * EB[ 5];
            E64[ 5] = 0.25 * EB[ 4] + 0.50 * EB[ 5] + 0.25 * EB[ 6];
            E64[ 6] = 0.25 * EB[ 5] + 0.50 * EB[ 6] + 0.25 * EB[ 7];
            E64[ 7] = 0.25 * EB[ 6] + 0.50 * EB[ 7] + 0.25 * EB[ 8];
            E64[ 8] = 0.25 * EB[ 7] + 0.50 * EB[ 8] + 0.25 * EB[ 9];
            E64[ 9] = 0.25 * EB[ 8] + 0.50 * EB[ 9] + 0.25 * EB[10];
            E64[10] = 0.25 * EB[ 9] + 0.50 * EB[10] + 0.25 * EB[11];
            E64[11] = 0.25 * EB[10] + 0.50 * EB[11] + 0.25 * EB[12];
            E64[12] = 0.25 * EB[11] + 0.50 * EB[12] + 0.25 * EB[13];
            E64[13] = 0.25 * EB[12] + 0.50 * EB[13] + 0.25 * EB[14];
            E64[14] = 0.25 * EB[13] + 0.50 * EB[14] + 0.25 * EB[15];
            E64[15] = 0.25 * EB[14] + 0.50 * EB[15] + 0.25 * EB[16];
            E64[16] = 0.25 * EB[15] + 0.50 * EB[16] + 0.25 * EB[17];
            E64[17] = 0.25 * EB[16] + 0.50 * EB[17] + 0.25 * EB[18];
            E64[18] = 0.25 * EB[17] + 0.50 * EB[18] + 0.25 * EB[19];
            E64[19] = 0.25 * EB[18] + 0.50 * EB[19] + 0.25 * EB[20];
            E64[20] = 0.25 * EB[19] + 0.50 * EB[20] + 0.25 * EB[21];
            E64[21] = 0.25 * EB[20] + 0.50 * EB[21] + 0.25 * EB[22];
            E64[22] = 0.25 * EB[21] + 0.50 * EB[22] + 0.25 * EB[23];
            E64[23] = 0.25 * EB[22] + 0.50 * EB[23] + 0.25 * EB[24];
            E64[24] = 0.25 * EB[23] + 0.50 * EB[24] + 0.25 * EB[25];
            E64[25] = 0.25 * EB[24] + 0.50 * EB[25] + 0.25 * EB[26];
            E64[26] = 0.25 * EB[25] + 0.50 * EB[26] + 0.25 * EB[27];
            E64[27] = 0.25 * EB[26] + 0.50 * EB[27] + 0.25 * EB[28];
            E64[28] = 0.25 * EB[27] + 0.50 * EB[28] + 0.25 * EB[29];
            E64[29] = 0.25 * EB[28] + 0.50 * EB[29] + 0.25 * EB[30];
            E64[30] = 0.25 * EB[29] + 0.50 * EB[30] + 0.25 * EB[31];
            E64[31] = 0.25 * EB[30] + 0.50 * EB[31] + 0.25 * EB[32];
            E64[32] = 0.25 * EB[31] + 0.50 * EB[32] + 0.25 * EB[33];
            E64[33] = 0.25 * EB[32] + 0.50 * EB[33] + 0.25 * EB[34];
            E64[34] = 0.25 * EB[33] + 0.50 * EB[34] + 0.25 * EB[35];
            E64[35] = 0.25 * EB[34] + 0.50 * EB[35] + 0.25 * EB[36];
            E64[36] = 0.25 * EB[35] + 0.50 * EB[36] + 0.25 * EB[37];
            E64[37] = 0.25 * EB[36] + 0.50 * EB[37] + 0.25 * EB[38];
            E64[38] = 0.25 * EB[37] + 0.50 * EB[38] + 0.25 * EB[39];
            E64[39] = 0.25 * EB[38] + 0.50 * EB[39] + 0.25 * EB[40];
            E64[40] = 0.25 * EB[39] + 0.50 * EB[40] + 0.25 * EB[41];
            E64[41] = 0.25 * EB[40] + 0.50 * EB[41] + 0.25 * EB[42];
            E64[42] = 0.25 * EB[41] + 0.50 * EB[42] + 0.25 * EB[43];
            E64[43] = 0.25 * EB[42] + 0.50 * EB[43] + 0.25 * EB[44];
            E64[44] = 0.25 * EB[43] + 0.50 * EB[44] + 0.25 * EB[45];
            E64[45] = 0.25 * EB[44] + 0.50 * EB[45] + 0.25 * EB[46];
            E64[46] = 0.25 * EB[45] + 0.50 * EB[46] + 0.25 * EB[47];
            E64[47] = 0.25 * EB[46] + 0.50 * EB[47] + 0.25 * EB[48];
            E64[48] = 0.25 * EB[47] + 0.50 * EB[48] + 0.25 * EB[49];
            E64[49] = 0.25 * EB[48] + 0.50 * EB[49] + 0.25 * EB[50];
            E64[50] = 0.25 * EB[49] + 0.50 * EB[50] + 0.25 * EB[51];
            E64[51] = 0.25 * EB[50] + 0.50 * EB[51] + 0.25 * EB[52];
            E64[52] = 0.25 * EB[51] + 0.50 * EB[52] + 0.25 * EB[53];
            E64[53] = 0.25 * EB[52] + 0.50 * EB[53] + 0.25 * EB[54];
            E64[54] = 0.25 * EB[53] + 0.50 * EB[54] + 0.25 * EB[55];
            E64[55] = 0.25 * EB[54] + 0.50 * EB[55] + 0.25 * EB[56];
            E64[56] = 0.25 * EB[55] + 0.50 * EB[56] + 0.25 * EB[57];
            E64[57] = 0.25 * EB[56] + 0.50 * EB[57] + 0.25 * EB[58];
            E64[58] = 0.25 * EB[57] + 0.50 * EB[58] + 0.25 * EB[59];
            E64[59] = 0.25 * EB[58] + 0.50 * EB[59] + 0.25 * EB[60];
            E64[60] = 0.25 * EB[59] + 0.50 * EB[60] + 0.25 * EB[61];
            E64[61] = 0.25 * EB[60] + 0.50 * EB[61] + 0.25 * EB[62];
            E64[62] = 0.25 * EB[61] + 0.50 * EB[62] + 0.25 * EB[63];
            E64[63] = 0.25 * EB[62] + 0.75 * EB[63];
        }
        // console.log("ES[b]=" + E64.toString());

        //  Pre-emphasis (3.3.7.2.3).
        {
            //  Eq. 21, Table 3.7.
            E64[ 0] *= pefactors[ 0];
            E64[ 1] *= pefactors[ 1];
            E64[ 2] *= pefactors[ 2];
            E64[ 3] *= pefactors[ 3];
            E64[ 4] *= pefactors[ 4];
            E64[ 5] *= pefactors[ 5];
            E64[ 6] *= pefactors[ 6];
            E64[ 7] *= pefactors[ 7];
            E64[ 8] *= pefactors[ 8];
            E64[ 9] *= pefactors[ 9];
            E64[10] *= pefactors[10];
            E64[11] *= pefactors[11];
            E64[12] *= pefactors[12];
            E64[13] *= pefactors[13];
            E64[14] *= pefactors[14];
            E64[15] *= pefactors[15];
            E64[16] *= pefactors[16];
            E64[17] *= pefactors[17];
            E64[18] *= pefactors[18];
            E64[19] *= pefactors[19];
            E64[20] *= pefactors[20];
            E64[21] *= pefactors[21];
            E64[22] *= pefactors[22];
            E64[23] *= pefactors[23];
            E64[24] *= pefactors[24];
            E64[25] *= pefactors[25];
            E64[26] *= pefactors[26];
            E64[27] *= pefactors[27];
            E64[28] *= pefactors[28];
            E64[29] *= pefactors[29];
            E64[30] *= pefactors[30];
            E64[31] *= pefactors[31];
            E64[32] *= pefactors[32];
            E64[33] *= pefactors[33];
            E64[34] *= pefactors[34];
            E64[35] *= pefactors[35];
            E64[36] *= pefactors[36];
            E64[37] *= pefactors[37];
            E64[38] *= pefactors[38];
            E64[39] *= pefactors[39];
            E64[40] *= pefactors[40];
            E64[41] *= pefactors[41];
            E64[42] *= pefactors[42];
            E64[43] *= pefactors[43];
            E64[44] *= pefactors[44];
            E64[45] *= pefactors[45];
            E64[46] *= pefactors[46];
            E64[47] *= pefactors[47];
            E64[48] *= pefactors[48];
            E64[49] *= pefactors[49];
            E64[50] *= pefactors[50];
            E64[51] *= pefactors[51];
            E64[52] *= pefactors[52];
            E64[53] *= pefactors[53];
            E64[54] *= pefactors[54];
            E64[55] *= pefactors[55];
            E64[56] *= pefactors[56];
            E64[57] *= pefactors[57];
            E64[58] *= pefactors[58];
            E64[59] *= pefactors[59];
            E64[60] *= pefactors[60];
            E64[61] *= pefactors[61];
            E64[62] *= pefactors[62];
            E64[63] *= pefactors[63];
        }
        // console.log("EP[b]=" + E64.toString());

        //  Noise floor (3.3.7.2.4).
        let nsfloor = 0;
        {
            //  Eq. 23
            nsfloor += E64[ 0] / 64;
            nsfloor += E64[ 1] / 64;
            nsfloor += E64[ 2] / 64;
            nsfloor += E64[ 3] / 64;
            nsfloor += E64[ 4] / 64;
            nsfloor += E64[ 5] / 64;
            nsfloor += E64[ 6] / 64;
            nsfloor += E64[ 7] / 64;
            nsfloor += E64[ 8] / 64;
            nsfloor += E64[ 9] / 64;
            nsfloor += E64[10] / 64;
            nsfloor += E64[11] / 64;
            nsfloor += E64[12] / 64;
            nsfloor += E64[13] / 64;
            nsfloor += E64[14] / 64;
            nsfloor += E64[15] / 64;
            nsfloor += E64[16] / 64;
            nsfloor += E64[17] / 64;
            nsfloor += E64[18] / 64;
            nsfloor += E64[19] / 64;
            nsfloor += E64[20] / 64;
            nsfloor += E64[21] / 64;
            nsfloor += E64[22] / 64;
            nsfloor += E64[23] / 64;
            nsfloor += E64[24] / 64;
            nsfloor += E64[25] / 64;
            nsfloor += E64[26] / 64;
            nsfloor += E64[27] / 64;
            nsfloor += E64[28] / 64;
            nsfloor += E64[29] / 64;
            nsfloor += E64[30] / 64;
            nsfloor += E64[31] / 64;
            nsfloor += E64[32] / 64;
            nsfloor += E64[33] / 64;
            nsfloor += E64[34] / 64;
            nsfloor += E64[35] / 64;
            nsfloor += E64[36] / 64;
            nsfloor += E64[37] / 64;
            nsfloor += E64[38] / 64;
            nsfloor += E64[39] / 64;
            nsfloor += E64[40] / 64;
            nsfloor += E64[41] / 64;
            nsfloor += E64[42] / 64;
            nsfloor += E64[43] / 64;
            nsfloor += E64[44] / 64;
            nsfloor += E64[45] / 64;
            nsfloor += E64[46] / 64;
            nsfloor += E64[47] / 64;
            nsfloor += E64[48] / 64;
            nsfloor += E64[49] / 64;
            nsfloor += E64[50] / 64;
            nsfloor += E64[51] / 64;
            nsfloor += E64[52] / 64;
            nsfloor += E64[53] / 64;
            nsfloor += E64[54] / 64;
            nsfloor += E64[55] / 64;
            nsfloor += E64[56] / 64;
            nsfloor += E64[57] / 64;
            nsfloor += E64[58] / 64;
            nsfloor += E64[59] / 64;
            nsfloor += E64[60] / 64;
            nsfloor += E64[61] / 64;
            nsfloor += E64[62] / 64;
            nsfloor += E64[63] / 64;
            nsfloor *= 1e-4;
            if (nsfloor < NSFLOOR_MIN) {
                nsfloor = NSFLOOR_MIN;
            }
        }
        // console.log("nsfloor=" + nsfloor);

        //  Logarithm (3.3.7.2.5).
        {
            //  Eq. 22, 24
            E64[ 0] = Math.log2(Math.max(E64[ 0], nsfloor) + 1e-31) * 0.5;
            E64[ 1] = Math.log2(Math.max(E64[ 1], nsfloor) + 1e-31) * 0.5;
            E64[ 2] = Math.log2(Math.max(E64[ 2], nsfloor) + 1e-31) * 0.5;
            E64[ 3] = Math.log2(Math.max(E64[ 3], nsfloor) + 1e-31) * 0.5;
            E64[ 4] = Math.log2(Math.max(E64[ 4], nsfloor) + 1e-31) * 0.5;
            E64[ 5] = Math.log2(Math.max(E64[ 5], nsfloor) + 1e-31) * 0.5;
            E64[ 6] = Math.log2(Math.max(E64[ 6], nsfloor) + 1e-31) * 0.5;
            E64[ 7] = Math.log2(Math.max(E64[ 7], nsfloor) + 1e-31) * 0.5;
            E64[ 8] = Math.log2(Math.max(E64[ 8], nsfloor) + 1e-31) * 0.5;
            E64[ 9] = Math.log2(Math.max(E64[ 9], nsfloor) + 1e-31) * 0.5;
            E64[10] = Math.log2(Math.max(E64[10], nsfloor) + 1e-31) * 0.5;
            E64[11] = Math.log2(Math.max(E64[11], nsfloor) + 1e-31) * 0.5;
            E64[12] = Math.log2(Math.max(E64[12], nsfloor) + 1e-31) * 0.5;
            E64[13] = Math.log2(Math.max(E64[13], nsfloor) + 1e-31) * 0.5;
            E64[14] = Math.log2(Math.max(E64[14], nsfloor) + 1e-31) * 0.5;
            E64[15] = Math.log2(Math.max(E64[15], nsfloor) + 1e-31) * 0.5;
            E64[16] = Math.log2(Math.max(E64[16], nsfloor) + 1e-31) * 0.5;
            E64[17] = Math.log2(Math.max(E64[17], nsfloor) + 1e-31) * 0.5;
            E64[18] = Math.log2(Math.max(E64[18], nsfloor) + 1e-31) * 0.5;
            E64[19] = Math.log2(Math.max(E64[19], nsfloor) + 1e-31) * 0.5;
            E64[20] = Math.log2(Math.max(E64[20], nsfloor) + 1e-31) * 0.5;
            E64[21] = Math.log2(Math.max(E64[21], nsfloor) + 1e-31) * 0.5;
            E64[22] = Math.log2(Math.max(E64[22], nsfloor) + 1e-31) * 0.5;
            E64[23] = Math.log2(Math.max(E64[23], nsfloor) + 1e-31) * 0.5;
            E64[24] = Math.log2(Math.max(E64[24], nsfloor) + 1e-31) * 0.5;
            E64[25] = Math.log2(Math.max(E64[25], nsfloor) + 1e-31) * 0.5;
            E64[26] = Math.log2(Math.max(E64[26], nsfloor) + 1e-31) * 0.5;
            E64[27] = Math.log2(Math.max(E64[27], nsfloor) + 1e-31) * 0.5;
            E64[28] = Math.log2(Math.max(E64[28], nsfloor) + 1e-31) * 0.5;
            E64[29] = Math.log2(Math.max(E64[29], nsfloor) + 1e-31) * 0.5;
            E64[30] = Math.log2(Math.max(E64[30], nsfloor) + 1e-31) * 0.5;
            E64[31] = Math.log2(Math.max(E64[31], nsfloor) + 1e-31) * 0.5;
            E64[32] = Math.log2(Math.max(E64[32], nsfloor) + 1e-31) * 0.5;
            E64[33] = Math.log2(Math.max(E64[33], nsfloor) + 1e-31) * 0.5;
            E64[34] = Math.log2(Math.max(E64[34], nsfloor) + 1e-31) * 0.5;
            E64[35] = Math.log2(Math.max(E64[35], nsfloor) + 1e-31) * 0.5;
            E64[36] = Math.log2(Math.max(E64[36], nsfloor) + 1e-31) * 0.5;
            E64[37] = Math.log2(Math.max(E64[37], nsfloor) + 1e-31) * 0.5;
            E64[38] = Math.log2(Math.max(E64[38], nsfloor) + 1e-31) * 0.5;
            E64[39] = Math.log2(Math.max(E64[39], nsfloor) + 1e-31) * 0.5;
            E64[40] = Math.log2(Math.max(E64[40], nsfloor) + 1e-31) * 0.5;
            E64[41] = Math.log2(Math.max(E64[41], nsfloor) + 1e-31) * 0.5;
            E64[42] = Math.log2(Math.max(E64[42], nsfloor) + 1e-31) * 0.5;
            E64[43] = Math.log2(Math.max(E64[43], nsfloor) + 1e-31) * 0.5;
            E64[44] = Math.log2(Math.max(E64[44], nsfloor) + 1e-31) * 0.5;
            E64[45] = Math.log2(Math.max(E64[45], nsfloor) + 1e-31) * 0.5;
            E64[46] = Math.log2(Math.max(E64[46], nsfloor) + 1e-31) * 0.5;
            E64[47] = Math.log2(Math.max(E64[47], nsfloor) + 1e-31) * 0.5;
            E64[48] = Math.log2(Math.max(E64[48], nsfloor) + 1e-31) * 0.5;
            E64[49] = Math.log2(Math.max(E64[49], nsfloor) + 1e-31) * 0.5;
            E64[50] = Math.log2(Math.max(E64[50], nsfloor) + 1e-31) * 0.5;
            E64[51] = Math.log2(Math.max(E64[51], nsfloor) + 1e-31) * 0.5;
            E64[52] = Math.log2(Math.max(E64[52], nsfloor) + 1e-31) * 0.5;
            E64[53] = Math.log2(Math.max(E64[53], nsfloor) + 1e-31) * 0.5;
            E64[54] = Math.log2(Math.max(E64[54], nsfloor) + 1e-31) * 0.5;
            E64[55] = Math.log2(Math.max(E64[55], nsfloor) + 1e-31) * 0.5;
            E64[56] = Math.log2(Math.max(E64[56], nsfloor) + 1e-31) * 0.5;
            E64[57] = Math.log2(Math.max(E64[57], nsfloor) + 1e-31) * 0.5;
            E64[58] = Math.log2(Math.max(E64[58], nsfloor) + 1e-31) * 0.5;
            E64[59] = Math.log2(Math.max(E64[59], nsfloor) + 1e-31) * 0.5;
            E64[60] = Math.log2(Math.max(E64[60], nsfloor) + 1e-31) * 0.5;
            E64[61] = Math.log2(Math.max(E64[61], nsfloor) + 1e-31) * 0.5;
            E64[62] = Math.log2(Math.max(E64[62], nsfloor) + 1e-31) * 0.5;
            E64[63] = Math.log2(Math.max(E64[63], nsfloor) + 1e-31) * 0.5;
        }
        // console.log("EL[b]=" + Etmp.toString());

        //  Band energy grouping (3.3.7.2.6).
        {
            //  Eq. 25, 26
            E4[ 0] = E64[ 0] / 12 + E64[ 0] /  6 + E64[ 1] /  4 + 
                     E64[ 2] /  4 + E64[ 3] /  6 + E64[ 4] / 12;
            E4[ 1] = E64[ 3] / 12 + E64[ 4] /  6 + E64[ 5] /  4 + 
                     E64[ 6] /  4 + E64[ 7] /  6 + E64[ 8] / 12;
            E4[ 2] = E64[ 7] / 12 + E64[ 8] /  6 + E64[ 9] /  4 + 
                     E64[10] /  4 + E64[11] /  6 + E64[12] / 12;
            E4[ 3] = E64[11] / 12 + E64[12] /  6 + E64[13] /  4 + 
                     E64[14] /  4 + E64[15] /  6 + E64[16] / 12;
            E4[ 4] = E64[15] / 12 + E64[16] /  6 + E64[17] /  4 + 
                     E64[18] /  4 + E64[19] /  6 + E64[20] / 12;
            E4[ 5] = E64[19] / 12 + E64[20] /  6 + E64[21] /  4 + 
                     E64[22] /  4 + E64[23] /  6 + E64[24] / 12;
            E4[ 6] = E64[23] / 12 + E64[24] /  6 + E64[25] /  4 + 
                     E64[26] /  4 + E64[27] /  6 + E64[28] / 12;
            E4[ 7] = E64[27] / 12 + E64[28] /  6 + E64[29] /  4 + 
                     E64[30] /  4 + E64[31] /  6 + E64[32] / 12;
            E4[ 8] = E64[31] / 12 + E64[32] /  6 + E64[33] /  4 + 
                     E64[34] /  4 + E64[35] /  6 + E64[36] / 12;
            E4[ 9] = E64[35] / 12 + E64[36] /  6 + E64[37] /  4 + 
                     E64[38] /  4 + E64[39] /  6 + E64[40] / 12;
            E4[10] = E64[39] / 12 + E64[40] /  6 + E64[41] /  4 + 
                     E64[42] /  4 + E64[43] /  6 + E64[44] / 12;
            E4[11] = E64[43] / 12 + E64[44] /  6 + E64[45] /  4 + 
                     E64[46] /  4 + E64[47] /  6 + E64[48] / 12;
            E4[12] = E64[47] / 12 + E64[48] /  6 + E64[49] /  4 + 
                     E64[50] /  4 + E64[51] /  6 + E64[52] / 12;
            E4[13] = E64[51] / 12 + E64[52] /  6 + E64[53] /  4 + 
                     E64[54] /  4 + E64[55] /  6 + E64[56] / 12;
            E4[14] = E64[55] / 12 + E64[56] /  6 + E64[57] /  4 + 
                     E64[58] /  4 + E64[59] /  6 + E64[60] / 12;
            E4[15] = E64[59] / 12 + E64[60] /  6 + E64[61] /  4 + 
                     E64[62] /  4 + E64[63] /  6 + E64[63] / 12;
        }
        // console.log("E4[b]=" + E4.toString());

        //  Mean removal and scaling, attack handling (3.3.7.2.7).
        {
            //  Eq. 27
            let E4mean = (
                E4[ 0] + E4[ 1] + E4[ 2] + E4[ 3] + 
                E4[ 4] + E4[ 5] + E4[ 6] + E4[ 7] + 
                E4[ 8] + E4[ 9] + E4[10] + E4[11] + 
                E4[12] + E4[13] + E4[14] + E4[15]
            ) / 16;
            scf0[ 0] = 0.85 * (E4[ 0] - E4mean);
            scf0[ 1] = 0.85 * (E4[ 1] - E4mean);
            scf0[ 2] = 0.85 * (E4[ 2] - E4mean);
            scf0[ 3] = 0.85 * (E4[ 3] - E4mean);
            scf0[ 4] = 0.85 * (E4[ 4] - E4mean);
            scf0[ 5] = 0.85 * (E4[ 5] - E4mean);
            scf0[ 6] = 0.85 * (E4[ 6] - E4mean);
            scf0[ 7] = 0.85 * (E4[ 7] - E4mean);
            scf0[ 8] = 0.85 * (E4[ 8] - E4mean);
            scf0[ 9] = 0.85 * (E4[ 9] - E4mean);
            scf0[10] = 0.85 * (E4[10] - E4mean);
            scf0[11] = 0.85 * (E4[11] - E4mean);
            scf0[12] = 0.85 * (E4[12] - E4mean);
            scf0[13] = 0.85 * (E4[13] - E4mean);
            scf0[14] = 0.85 * (E4[14] - E4mean);
            scf0[15] = 0.85 * (E4[15] - E4mean);
        }

        let scf;
        {
            //  If attack detection is active and Fatt(k) = 1, a second 
            //  smoothing shall be applied.
            if (Fatt_k != 0) {
                //  Eq. 29, 30, 31, 32
                scf1[ 0] = (
                    scf0[ 0] + scf0[ 1] + scf0[ 2]
                ) / 3;
                scf1[ 1] = (
                    scf0[ 0] + scf0[ 1] + scf0[ 2] + 
                    scf0[ 3]
                ) / 4;
                scf1[ 2] = (
                    scf0[ 0] + scf0[ 1] + scf0[ 2] + 
                    scf0[ 3] + scf0[ 4]
                ) / 5;
                scf1[ 3] = (
                    scf0[ 1] + scf0[ 2] + scf0[ 3] + 
                    scf0[ 4] + scf0[ 5]
                ) / 5;
                scf1[ 4] = (
                    scf0[ 2] + scf0[ 3] + scf0[ 4] + 
                    scf0[ 5] + scf0[ 6]
                ) / 5;
                scf1[ 5] = (
                    scf0[ 3] + scf0[ 4] + scf0[ 5] + 
                    scf0[ 6] + scf0[ 7]
                ) / 5;
                scf1[ 6] = (
                    scf0[ 4] + scf0[ 5] + scf0[ 6] + 
                    scf0[ 7] + scf0[ 8]
                ) / 5;
                scf1[ 7] = (
                    scf0[ 5] + scf0[ 6] + scf0[ 7] + 
                    scf0[ 8] + scf0[ 9]
                ) / 5;
                scf1[ 8] = (
                    scf0[ 6] + scf0[ 7] + scf0[ 8] + 
                    scf0[ 9] + scf0[10]
                ) / 5;
                scf1[ 9] = (
                    scf0[ 7] + scf0[ 8] + scf0[ 9] + 
                    scf0[10] + scf0[11]
                ) / 5;
                scf1[10] = (
                    scf0[ 8] + scf0[ 9] + scf0[10] + 
                    scf0[11] + scf0[12]
                ) / 5;
                scf1[11] = (
                    scf0[ 9] + scf0[10] + scf0[11] + 
                    scf0[12] + scf0[13]
                ) / 5;
                scf1[12] = (
                    scf0[10] + scf0[11] + scf0[12] + 
                    scf0[13] + scf0[14]
                ) / 5;
                scf1[13] = (
                    scf0[11] + scf0[12] + scf0[13] + 
                    scf0[14] + scf0[15]
                ) / 5;
                scf1[14] = (
                    scf0[12] + scf0[13] + scf0[14] + 
                    scf0[15]
                ) / 4;
                scf1[15] = (
                    scf0[13] + scf0[14] + scf0[15]
                ) / 3;

                //  Eq. 34
                let scf1_mean = (
                    scf1[ 0] + scf1[ 1] + scf1[ 2] + scf1[ 3] + 
                    scf1[ 4] + scf1[ 5] + scf1[ 6] + scf1[ 7] + 
                    scf1[ 8] + scf1[ 9] + scf1[10] + scf1[11] + 
                    scf1[12] + scf1[13] + scf1[14] + scf1[15]
                ) / 16;
                scf1[ 0] = fatt * (scf1[ 0] - scf1_mean);
                scf1[ 1] = fatt * (scf1[ 1] - scf1_mean);
                scf1[ 2] = fatt * (scf1[ 2] - scf1_mean);
                scf1[ 3] = fatt * (scf1[ 3] - scf1_mean);
                scf1[ 4] = fatt * (scf1[ 4] - scf1_mean);
                scf1[ 5] = fatt * (scf1[ 5] - scf1_mean);
                scf1[ 6] = fatt * (scf1[ 6] - scf1_mean);
                scf1[ 7] = fatt * (scf1[ 7] - scf1_mean);
                scf1[ 8] = fatt * (scf1[ 8] - scf1_mean);
                scf1[ 9] = fatt * (scf1[ 9] - scf1_mean);
                scf1[10] = fatt * (scf1[10] - scf1_mean);
                scf1[11] = fatt * (scf1[11] - scf1_mean);
                scf1[12] = fatt * (scf1[12] - scf1_mean);
                scf1[13] = fatt * (scf1[13] - scf1_mean);
                scf1[14] = fatt * (scf1[14] - scf1_mean);
                scf1[15] = fatt * (scf1[15] - scf1_mean);
    
                scf = scf1;
            } else {
                scf = scf0;
            }
        }
        // console.log("scf=" + scf.toString());

        //
        //  SNS quantization (3.3.7.3).
        //

        //  Stage 1 (3.3.7.3.2).
        {
            let dMSE_LFmin = Infinity;
            let dMSE_HFmin = Infinity;
            for (let i = 0; i < 32; ++i) {
                let tmp, codebook;

                //  Eq. 35
                let dMSE_LFi;
                codebook = LFCB[i];
                tmp = scf[ 0] - codebook[0];
                dMSE_LFi  = tmp * tmp;
                tmp = scf[ 1] - codebook[1];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 2] - codebook[2];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 3] - codebook[3];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 4] - codebook[4];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 5] - codebook[5];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 6] - codebook[6];
                dMSE_LFi += tmp * tmp;
                tmp = scf[ 7] - codebook[7];
                dMSE_LFi += tmp * tmp;

                //  Eq. 36
                let dMSE_HFi;
                codebook = HFCB[i];
                tmp = scf[ 8] - codebook[0];
                dMSE_HFi  = tmp * tmp;
                tmp = scf[ 9] - codebook[1];
                dMSE_HFi += tmp * tmp;
                tmp = scf[10] - codebook[2];
                dMSE_HFi += tmp * tmp;
                tmp = scf[11] - codebook[3];
                dMSE_HFi += tmp * tmp;
                tmp = scf[12] - codebook[4];
                dMSE_HFi += tmp * tmp;
                tmp = scf[13] - codebook[5];
                dMSE_HFi += tmp * tmp;
                tmp = scf[14] - codebook[6];
                dMSE_HFi += tmp * tmp;
                tmp = scf[15] - codebook[7];
                dMSE_HFi += tmp * tmp;

                //  Eq. 37
                if (dMSE_LFi < dMSE_LFmin) {
                    dMSE_LFmin = dMSE_LFi;
                    ind_LF = i;
                }

                //  Eq. 38
                if (dMSE_HFi < dMSE_HFmin) {
                    dMSE_HFmin = dMSE_HFi;
                    ind_HF = i;
                }
            }
        }

        // console.log("ind_LF=" + ind_LF);
        // console.log("ind_HF=" + ind_HF);

        {
            //  The first stage vector shall be composed as:
            let codebook;

            //  Eq. 39
            codebook = LFCB[ind_LF];
            st1[ 0] = codebook[0];
            st1[ 1] = codebook[1];
            st1[ 2] = codebook[2];
            st1[ 3] = codebook[3];
            st1[ 4] = codebook[4];
            st1[ 5] = codebook[5];
            st1[ 6] = codebook[6];
            st1[ 7] = codebook[7];

            //  Eq. 40
            codebook = HFCB[ind_HF];
            st1[ 8] = codebook[0];
            st1[ 9] = codebook[1];
            st1[10] = codebook[2];
            st1[11] = codebook[3];
            st1[12] = codebook[4];
            st1[13] = codebook[5];
            st1[14] = codebook[6];
            st1[15] = codebook[7];
        }
        
        {
            //  The first stage residual signal shall be calculated as:

            //  Eq. 41
            r1[ 0] = scf[ 0] - st1[ 0];
            r1[ 1] = scf[ 1] - st1[ 1];
            r1[ 2] = scf[ 2] - st1[ 2];
            r1[ 3] = scf[ 3] - st1[ 3];
            r1[ 4] = scf[ 4] - st1[ 4];
            r1[ 5] = scf[ 5] - st1[ 5];
            r1[ 6] = scf[ 6] - st1[ 6];
            r1[ 7] = scf[ 7] - st1[ 7];
            r1[ 8] = scf[ 8] - st1[ 8];
            r1[ 9] = scf[ 9] - st1[ 9];
            r1[10] = scf[10] - st1[10];
            r1[11] = scf[11] - st1[11];
            r1[12] = scf[12] - st1[12];
            r1[13] = scf[13] - st1[13];
            r1[14] = scf[14] - st1[14];
            r1[15] = scf[15] - st1[15];
        }
        // console.log("r1[n]=" + r1.toString());

        //  Stage 2 (3.3.7.3.3).

        //  Stage 2 target preparation (3.3.7.3.3.3).
        {
            //  Eq. 43
            DCTIIForward_16(r1, t2rot);
            t2rot[ 0] *= 0.25;
            t2rot[ 1] *= 0.3535533905932738;
            t2rot[ 2] *= 0.3535533905932738;
            t2rot[ 3] *= 0.3535533905932738;
            t2rot[ 4] *= 0.3535533905932738;
            t2rot[ 5] *= 0.3535533905932738;
            t2rot[ 6] *= 0.3535533905932738;
            t2rot[ 7] *= 0.3535533905932738;
            t2rot[ 8] *= 0.3535533905932738;
            t2rot[ 9] *= 0.3535533905932738;
            t2rot[10] *= 0.3535533905932738;
            t2rot[11] *= 0.3535533905932738;
            t2rot[12] *= 0.3535533905932738;
            t2rot[13] *= 0.3535533905932738;
            t2rot[14] *= 0.3535533905932738;
            t2rot[15] *= 0.3535533905932738;
            for (let n = 0; n < 10; ++n) {
                t2rot_setA[n] = t2rot[n];
            }
            for (let n = 10, i = 0; n < 16; ++n, ++i) {
                t2rot_setB[i] = t2rot[n];
            }
        }
        // console.log("t2rot[n]=" + t2rot.toString());

        //  Shape candidates (3.3.6.3.3.4).
        {
            PVQSearch(10, 10, t2rot_setA, sns_y0_setA, pvq_cache_s);
            PVQSearch( 6,  1, t2rot_setB, sns_y0_setB, pvq_cache_s);
            // PVQSearch(10, 10, t2rot_setA, sns_y1_setA, pvq_cache_s);
            PVQSearch(16,  8,      t2rot,      sns_y2, pvq_cache_s);
            PVQSearch(16,  6,      t2rot,      sns_y3, pvq_cache_s);

            sns_y0[ 0] = sns_y0_setA[0];
            sns_y0[ 1] = sns_y0_setA[1];
            sns_y0[ 2] = sns_y0_setA[2];
            sns_y0[ 3] = sns_y0_setA[3];
            sns_y0[ 4] = sns_y0_setA[4];
            sns_y0[ 5] = sns_y0_setA[5];
            sns_y0[ 6] = sns_y0_setA[6];
            sns_y0[ 7] = sns_y0_setA[7];
            sns_y0[ 8] = sns_y0_setA[8];
            sns_y0[ 9] = sns_y0_setA[9];
            sns_y0[10] = sns_y0_setB[0];
            sns_y0[11] = sns_y0_setB[1];
            sns_y0[12] = sns_y0_setB[2];
            sns_y0[13] = sns_y0_setB[3];
            sns_y0[14] = sns_y0_setB[4];
            sns_y0[15] = sns_y0_setB[5];

            sns_y1[ 0] = sns_y0_setA[0];
            sns_y1[ 1] = sns_y0_setA[1];
            sns_y1[ 2] = sns_y0_setA[2];
            sns_y1[ 3] = sns_y0_setA[3];
            sns_y1[ 4] = sns_y0_setA[4];
            sns_y1[ 5] = sns_y0_setA[5];
            sns_y1[ 6] = sns_y0_setA[6];
            sns_y1[ 7] = sns_y0_setA[7];
            sns_y1[ 8] = sns_y0_setA[8];
            sns_y1[ 9] = sns_y0_setA[9];
            sns_y1[10] = 0;
            sns_y1[11] = 0;
            sns_y1[12] = 0;
            sns_y1[13] = 0;
            sns_y1[14] = 0;
            sns_y1[15] = 0;

            PVQNormalize(sns_y0, sns_xq0);
            PVQNormalize(sns_y1, sns_xq1);
            PVQNormalize(sns_y2, sns_xq2);
            PVQNormalize(sns_y3, sns_xq3);
        }

        // console.log("sns_y0[n]=" + sns_y0.toString());
        // console.log("sns_y1[n]=" + sns_y1.toString());
        // console.log("sns_y2[n]=" + sns_y2.toString());
        // console.log("sns_y3[n]=" + sns_y3.toString());

        // console.log("sns_xq0[n]=" + sns_xq0.toString());
        // console.log("sns_xq1[n]=" + sns_xq1.toString());
        // console.log("sns_xq2[n]=" + sns_xq2.toString());
        // console.log("sns_xq3[n]=" + sns_xq3.toString());

        //  Shape and gain combination determination (3.3.7.3.3.7).
        {
            let dMSE_min = Infinity;
            for (let j = 0; j < 4; ++j) {
                let gains = GIJ[j];
                let vec = sns_xq[j];
                for (let i = 0, ngains = gains.length; i < ngains; ++i) {
                    let gain = gains[i];
                    let tmp;

                    //  Eq. 55
                    let dMSE;
                    tmp = t2rot[ 0] - gain * vec[ 0];
                    dMSE  = tmp * tmp;
                    tmp = t2rot[ 1] - gain * vec[ 1];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 2] - gain * vec[ 2];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 3] - gain * vec[ 3];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 4] - gain * vec[ 4];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 5] - gain * vec[ 5];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 6] - gain * vec[ 6];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 7] - gain * vec[ 7];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 8] - gain * vec[ 8];
                    dMSE += tmp * tmp;
                    tmp = t2rot[ 9] - gain * vec[ 9];
                    dMSE += tmp * tmp;
                    tmp = t2rot[10] - gain * vec[10];
                    dMSE += tmp * tmp;
                    tmp = t2rot[11] - gain * vec[11];
                    dMSE += tmp * tmp;
                    tmp = t2rot[12] - gain * vec[12];
                    dMSE += tmp * tmp;
                    tmp = t2rot[13] - gain * vec[13];
                    dMSE += tmp * tmp;
                    tmp = t2rot[14] - gain * vec[14];
                    dMSE += tmp * tmp;
                    tmp = t2rot[15] - gain * vec[15];
                    dMSE += tmp * tmp;

                    //  Eq. 56
                    if (dMSE < dMSE_min) {
                        dMSE_min = dMSE;
                        shape_j = j;
                        gain_i = i;
                    }
                }
            }
        }
        // console.log("shape_j=" + shape_j);
        // console.log("gain_i=" + gain_i);

        //  Enumeration of the selected PVQ pulse configurations (3.3.7.3.3.8).
        let idxB = -1, LS_indB = -1;
        {
            switch (shape_j) {
            case 0:
                MPVQ_16x10.enumerate(sns_y0_setB, mpvq_enum_cache);
                idxB = mpvq_enum_cache[1];
                LS_indB = mpvq_enum_cache[0];
                //  Fall through.
            case 1:
                MPVQ_16x10.enumerate(sns_y0_setA, mpvq_enum_cache);
                idxA = mpvq_enum_cache[1];
                LS_indA = mpvq_enum_cache[0];
                break;
            case 2:
                MPVQ_16x10.enumerate(sns_y2, mpvq_enum_cache);
                idxA = mpvq_enum_cache[1];
                LS_indA = mpvq_enum_cache[0];
                break;
            case 3:
                MPVQ_16x10.enumerate(sns_y3, mpvq_enum_cache);
                idxA = mpvq_enum_cache[1];
                LS_indA = mpvq_enum_cache[0];
                break;
            default:
                throw new LC3BugError("Never reach.");
            }
        }

        // console.log("idxA=" + idxA);
        // console.log("LS_indA=" + LS_indA);
        // console.log("idxB=" + idxB);
        // console.log("LS_indB=" + LS_indB);

        //  Multiplexing of SNS VQ codewords (3.3.7.3.4).
        {
            switch (shape_j) {
            case 0:
                //  Eq. 58
                index_joint = (2 * idxB + LS_indB + 2) * 2390004 + idxA;
                break;
            case 1:
                //  Eq. 59
                index_joint = ((gain_i & 1) >>> 0) * 2390004 + idxA;
                break;
            case 2:
                //  Eq. 60
                index_joint = idxA;
                break;
            case 3:
                //  Eq. 61
                index_joint = 15158272 + ((gain_i & 1) >>> 0) + 2 * idxA;
                break;
            default:
                throw new LC3BugError("Never reach.");
            }
        }
        // console.log("index_joint=" + index_joint.toString());

        //  Synthesis of the Quantized SNS scale factor vector (3.3.7.3.4.3).
        {
            //  Eq. 62
            let vec = sns_xq[shape_j];
            let gain = GIJ[shape_j][gain_i];
            let c1 = 0.25 * gain, c2 = 0.3535533905932738 * gain;
            scfQ[ 0] = vec[ 0] * c1;
            scfQ[ 1] = vec[ 1] * c2;
            scfQ[ 2] = vec[ 2] * c2;
            scfQ[ 3] = vec[ 3] * c2;
            scfQ[ 4] = vec[ 4] * c2;
            scfQ[ 5] = vec[ 5] * c2;
            scfQ[ 6] = vec[ 6] * c2;
            scfQ[ 7] = vec[ 7] * c2;
            scfQ[ 8] = vec[ 8] * c2;
            scfQ[ 9] = vec[ 9] * c2;
            scfQ[10] = vec[10] * c2;
            scfQ[11] = vec[11] * c2;
            scfQ[12] = vec[12] * c2;
            scfQ[13] = vec[13] * c2;
            scfQ[14] = vec[14] * c2;
            scfQ[15] = vec[15] * c2;
            DCTIIInverse_16(scfQ, scfQ);
            scfQ[ 0] += st1[ 0];
            scfQ[ 1] += st1[ 1];
            scfQ[ 2] += st1[ 2];
            scfQ[ 3] += st1[ 3];
            scfQ[ 4] += st1[ 4];
            scfQ[ 5] += st1[ 5];
            scfQ[ 6] += st1[ 6];
            scfQ[ 7] += st1[ 7];
            scfQ[ 8] += st1[ 8];
            scfQ[ 9] += st1[ 9];
            scfQ[10] += st1[10];
            scfQ[11] += st1[11];
            scfQ[12] += st1[12];
            scfQ[13] += st1[13];
            scfQ[14] += st1[14];
            scfQ[15] += st1[15];
        }
        // console.log("scfQ=" + scfQ.toString());

        //  SNS scale factors interpolation (3.3.7.4).
        {
            let t1, t2;

            //  Eq. 63
            scfQint[0] = scfQ[0];
            scfQint[1] = scfQ[0];

            t1 = scfQ[ 0];
            t2 = (scfQ[ 1] - t1) / 8;
            scfQint[ 2] = t1 +     t2;
            scfQint[ 3] = t1 + 3 * t2;
            scfQint[ 4] = t1 + 5 * t2;
            scfQint[ 5] = t1 + 7 * t2;

            t1 = scfQ[ 1];
            t2 = (scfQ[ 2] - t1) / 8;
            scfQint[ 6] = t1 +     t2;
            scfQint[ 7] = t1 + 3 * t2;
            scfQint[ 8] = t1 + 5 * t2;
            scfQint[ 9] = t1 + 7 * t2;

            t1 = scfQ[ 2];
            t2 = (scfQ[ 3] - t1) / 8;
            scfQint[10] = t1 +     t2;
            scfQint[11] = t1 + 3 * t2;
            scfQint[12] = t1 + 5 * t2;
            scfQint[13] = t1 + 7 * t2;

            t1 = scfQ[ 3];
            t2 = (scfQ[ 4] - t1) / 8;
            scfQint[14] = t1 +     t2;
            scfQint[15] = t1 + 3 * t2;
            scfQint[16] = t1 + 5 * t2;
            scfQint[17] = t1 + 7 * t2;

            t1 = scfQ[ 4];
            t2 = (scfQ[ 5] - t1) / 8;
            scfQint[18] = t1 +     t2;
            scfQint[19] = t1 + 3 * t2;
            scfQint[20] = t1 + 5 * t2;
            scfQint[21] = t1 + 7 * t2;

            t1 = scfQ[ 5];
            t2 = (scfQ[ 6] - t1) / 8;
            scfQint[22] = t1 +     t2;
            scfQint[23] = t1 + 3 * t2;
            scfQint[24] = t1 + 5 * t2;
            scfQint[25] = t1 + 7 * t2;

            t1 = scfQ[ 6];
            t2 = (scfQ[ 7] - t1) / 8;
            scfQint[26] = t1 +     t2;
            scfQint[27] = t1 + 3 * t2;
            scfQint[28] = t1 + 5 * t2;
            scfQint[29] = t1 + 7 * t2;

            t1 = scfQ[ 7];
            t2 = (scfQ[ 8] - t1) / 8;
            scfQint[30] = t1 +     t2;
            scfQint[31] = t1 + 3 * t2;
            scfQint[32] = t1 + 5 * t2;
            scfQint[33] = t1 + 7 * t2;

            t1 = scfQ[ 8];
            t2 = (scfQ[ 9] - t1) / 8;
            scfQint[34] = t1 +     t2;
            scfQint[35] = t1 + 3 * t2;
            scfQint[36] = t1 + 5 * t2;
            scfQint[37] = t1 + 7 * t2;

            t1 = scfQ[ 9];
            t2 = (scfQ[10] - t1) / 8;
            scfQint[38] = t1 +     t2;
            scfQint[39] = t1 + 3 * t2;
            scfQint[40] = t1 + 5 * t2;
            scfQint[41] = t1 + 7 * t2;

            t1 = scfQ[10];
            t2 = (scfQ[11] - t1) / 8;
            scfQint[42] = t1 +     t2;
            scfQint[43] = t1 + 3 * t2;
            scfQint[44] = t1 + 5 * t2;
            scfQint[45] = t1 + 7 * t2;

            t1 = scfQ[11];
            t2 = (scfQ[12] - t1) / 8;
            scfQint[46] = t1 +     t2;
            scfQint[47] = t1 + 3 * t2;
            scfQint[48] = t1 + 5 * t2;
            scfQint[49] = t1 + 7 * t2;

            t1 = scfQ[12];
            t2 = (scfQ[13] - t1) / 8;
            scfQint[50] = t1 +     t2;
            scfQint[51] = t1 + 3 * t2;
            scfQint[52] = t1 + 5 * t2;
            scfQint[53] = t1 + 7 * t2;

            t1 = scfQ[13];
            t2 = (scfQ[14] - t1) / 8;
            scfQint[54] = t1 +     t2;
            scfQint[55] = t1 + 3 * t2;
            scfQint[56] = t1 + 5 * t2;
            scfQint[57] = t1 + 7 * t2;

            t1 = scfQ[14];
            t2 = (scfQ[15] - t1) / 8;
            scfQint[58] = t1 +     t2;
            scfQint[59] = t1 + 3 * t2;
            scfQint[60] = t1 + 5 * t2;
            scfQint[61] = t1 + 7 * t2;

            t1 = scfQ[15];
            scfQint[62] = t1 +     t2;
            scfQint[63] = t1 + 3 * t2;
        }
        // console.log("scfQint=" + scfQint);
        
        //  In cases where the codec is configured to operate on a number of 
        //  bands NB < 64, the number of scale factors will need to be reduced.
        let scfQint_use;
        {
            if (NB < 64) {
                let i = 0, iEnd = 64 - NB, j = 0;
                for (; i < iEnd; ++i, j += 2) {
                    scfQint_tmp[i] = 0.5 * (scfQint[j] + scfQint[j + 1]);
                }
                for (; i < NB; ++i) {
                    scfQint_tmp[i] = scfQint[iEnd + i];
                }
                scfQint_use = scfQint_tmp;
            } else {
                scfQint_use = scfQint;
            }
        }

        //  The scale factors are then transformed back into the linear domain.
        {
            //  Eq. 64
            for (let b = 0; b < NB; ++b) {
                gsns[b] = Math.pow(2, -scfQint_use[b]);
            }
            for (let b = NB; b < 64; ++b) {
                gsns[b] = 0;
            }
        }
        // console.log("gsns[b]=" + gsns.toString());

        //  Spectral shaping (3.3.7.5).
        {
            for (let b = 0; b < NB; ++b) {
                let gsns_b = gsns[b];
                for (let k = Ifs[b], kEnd = Ifs[b + 1]; k < kEnd; ++k) {
                    Xs[k] = X[k] * gsns_b;
                }
            }
        }
        // console.log("Xs[n]=" + Xs.toString());
    };

    /**
     *  Get vector quantization parameters.
     * 
     *  @throws {LC3IllegalParameterError}
     *    - VQP size mismatches.
     *  @param {Number[]} [VQP] 
     *    - The buffer of returned vector quantization parameters (used for 
     *      reducing array allocation).
     *  @returns 
     *    - The vector quantization parameters (denotes as VQP[]), where:
     *      - VQP[0] = ind_LF,
     *      - VQP[1] = ind_HF,
     *      - VQP[2] = gain_i,
     *      - VQP[3] = shape_j,
     *      - VQP[4] = index_joint
     *      - VQP[5] = LS_indA
     */
    this.getVectorQuantizationParameters = function(VQP = new Array(6)) {
        //  Check VQP size.
        if (VQP.length != 6) {
            throw new LC3IllegalParameterError(
                "VQP size mismatches."
            );
        }

        //  Write VQ parameters.
        VQP[0] = ind_LF;
        VQP[1] = ind_HF;
        VQP[2] = gain_i;
        VQP[3] = shape_j;
        VQP[4] = index_joint;
        VQP[5] = LS_indA;

        return VQP;
    };

    /**
     *  Get the shaped spectrum coefficients (i.e. Xs[k]).
     * 
     *  @returns {Number[]}
     *    - The shaped spectrum coefficients.
     */
    this.getShapedSpectrumCoefficients = function() {
        return Xs;
    };
}

//  Export public APIs.
module.exports = {
    "LC3SpectralNoiseShapingEncoder": LC3SpectralNoiseShapingEncoder
};