//
//  Copyright 2021 XiaoJSoft Studio. All rights reserved.
//  Use of this source code is governed by a BSD-style license that can be
//  found in the LICENSE.md file.
//

//
//  Public functions.
//

/**
 *  Do 16-point Type-II FDCT (not normalized).
 * 
 *  Note(s):
 *    [1] Expected output:
 *        dct_out[k] = sum(n = 0...15, dct_in[n] * cos((2n + 1)kπ / 32))
 *        (where 0 <= k < 16).
 *    [2] In-place transformation is supported.
 * 
 *  @param {Number[]} dct_in
 *    - The input vector.
 *  @param {Number[]} [dct_out]
 *    - The output vector.
 *  @returns {Number[]}
 *    - The output vector.
 */
function DCTIIForward_16(dct_in, dct_out = new Array(16)) {
    //
    //  This function was generated by our proprietary DCT compiler 
    //  automatically.
    //  Do NOT modified the code manually.
    //
    let mv_im, mv_re, t0, t1, t2, t3;
    let i0_re = dct_in[0];
    let i0_im = 0;
    let i1_re = dct_in[2];
    let i1_im = 0;
    let i2_re = dct_in[4];
    let i2_im = 0;
    let i3_re = dct_in[6];
    let i3_im = 0;
    let i4_re = dct_in[8];
    let i4_im = 0;
    let i5_re = dct_in[10];
    let i5_im = 0;
    let i6_re = dct_in[12];
    let i6_im = 0;
    let i7_re = dct_in[14];
    let i7_im = 0;
    let i8_re = dct_in[15];
    let i8_im = 0;
    let i9_re = dct_in[13];
    let i9_im = 0;
    let i10_re = dct_in[11];
    let i10_im = 0;
    let i11_re = dct_in[9];
    let i11_im = 0;
    let i12_re = dct_in[7];
    let i12_im = 0;
    let i13_re = dct_in[5];
    let i13_im = 0;
    let i14_re = dct_in[3];
    let i14_im = 0;
    let i15_re = dct_in[1];
    let i15_im = 0;
    t0 = i0_re + i8_re;
    t1 = i4_re + i12_re;
    t2 = i0_re - i8_re;
    t3 = i4_re - i12_re;
    i0_re = t0 + t1;
    i4_re = t2;
    i4_im = -t3;
    i8_re = t0 - t1;
    i12_re = t2;
    i12_im = t3;
    t0 = i2_re + i10_re;
    t1 = i6_re + i14_re;
    t2 = i2_re - i10_re;
    t3 = i6_re - i14_re;
    i2_re = t0 + t1;
    i6_re = t2;
    i6_im = -t3;
    i10_re = t0 - t1;
    t0 = i6_re + i6_im;
    t1 = -i6_re + i6_im;
    i6_re = t0 * 0.7071067811865476;
    i6_im = t1 * 0.7071067811865476;
    t0 = i10_re;
    i10_re = i10_im;
    i10_im = -t0;
    i14_re = -i6_re;
    i14_im = i6_im;
    t0 = i0_re;
    t1 = i0_im;
    t2 = i2_re;
    t3 = i2_im;
    mv_re = t0 - t2;
    mv_im = t1 - t3;
    i0_re = t0 + t2;
    // i0_im = t1 + t3;
    i2_re = i4_re + i6_re;
    i2_im = i4_im + i6_im;
    i4_re = i8_re + i10_re;
    i4_im = i8_im + i10_im;
    i6_re = i12_re + i14_re;
    i6_im = i12_im + i14_im;
    i8_re = mv_re;
    i8_im = mv_im;
    i14_re = i2_re;
    i14_im = -i2_im;
    i12_re = i4_re;
    i12_im = -i4_im;
    i10_re = i6_re;
    i10_im = -i6_im;
    t0 = i1_re + i9_re;
    t1 = i5_re + i13_re;
    t2 = i1_re - i9_re;
    t3 = i5_re - i13_re;
    i1_re = t0 + t1;
    i5_re = t2;
    i5_im = -t3;
    i9_re = t0 - t1;
    i13_re = t2;
    i13_im = t3;
    t0 = i3_re + i11_re;
    t1 = i7_re + i15_re;
    t2 = i3_re - i11_re;
    t3 = i7_re - i15_re;
    i3_re = t0 + t1;
    i7_re = t2;
    i7_im = -t3;
    i11_re = t0 - t1;
    t0 = i7_re + i7_im;
    t1 = -i7_re + i7_im;
    i7_re = t0 * 0.7071067811865476;
    i7_im = t1 * 0.7071067811865476;
    t0 = i11_re;
    i11_re = i11_im;
    i11_im = -t0;
    i15_re = -i7_re;
    i15_im = i7_im;
    t0 = i1_re;
    t1 = i1_im;
    t2 = i3_re;
    t3 = i3_im;
    mv_re = t0 - t2;
    mv_im = t1 - t3;
    i1_re = t0 + t2;
    // i1_im = t1 + t3;
    i3_re = i5_re + i7_re;
    i3_im = i5_im + i7_im;
    i5_re = i9_re + i11_re;
    i5_im = i9_im + i11_im;
    i7_re = i13_re + i15_re;
    i7_im = i13_im + i15_im;
    i9_re = mv_re;
    i9_im = mv_im;
    t0 = 0.9238795325112865 * (i3_re + i3_im);
    t1 = i3_re * (-1.306562964876377);
    t2 = i3_im * 0.5411961001461961;
    i3_re = t0 - t2;
    i3_im = t0 + t1;
    t0 = i5_re + i5_im;
    t1 = -i5_re + i5_im;
    i5_re = t0 * 0.7071067811865476;
    i5_im = t1 * 0.7071067811865476;
    t0 = 0.38268343236509 * (i7_re + i7_im);
    t1 = i7_re * (-1.3065629648763766);
    t2 = i7_im * (-0.5411961001461967);
    i7_re = t0 - t2;
    i7_im = t0 + t1;
    t0 = i9_re;
    i9_re = i9_im;
    i9_im = -t0;
    i15_re = -i3_re;
    i15_im = i3_im;
    i13_re = -i5_re;
    i13_im = i5_im;
    i11_re = -i7_re;
    i11_im = i7_im;
    t0 = i0_re;
    // t1 = i0_im;
    t2 = i1_re;
    // t3 = i1_im;
    mv_re = t0 - t2;
    // mv_im = t1 - t3;
    i0_re = t0 + t2;
    // i0_im = t1 + t3;
    i1_re = i2_re + i3_re;
    i1_im = i2_im + i3_im;
    i2_re = i4_re + i5_re;
    i2_im = i4_im + i5_im;
    i3_re = i6_re + i7_re;
    i3_im = i6_im + i7_im;
    i4_re = i8_re + i9_re;
    i4_im = i8_im + i9_im;
    i5_re = i10_re + i11_re;
    i5_im = i10_im + i11_im;
    i6_re = i12_re + i13_re;
    i6_im = i12_im + i13_im;
    i7_re = i14_re + i15_re;
    i7_im = i14_im + i15_im;
    i8_re = mv_re;
    // i8_im = mv_im;
    dct_out[0] = i0_re;
    t0 = 0.9951847266721969 * (i1_re + i1_im);
    t1 = i1_re * (-1.0932018670017574);
    t2 = i1_im * 0.8971675863426364;
    i1_re = t0 - t2;
    i1_im = t0 + t1;
    dct_out[15] = -i1_im;
    dct_out[1] = i1_re;
    t0 = 0.9807852804032303 * (i2_re + i2_im);
    t1 = i2_re * (-1.175875602419359);
    t2 = i2_im * 0.7856949583871016;
    i2_re = t0 - t2;
    i2_im = t0 + t1;
    dct_out[14] = -i2_im;
    dct_out[2] = i2_re;
    t0 = 0.9569403357322088 * (i3_re + i3_im);
    t1 = i3_re * (-1.2472250129866713);
    t2 = i3_im * 0.6666556584777463;
    i3_re = t0 - t2;
    i3_im = t0 + t1;
    dct_out[13] = -i3_im;
    dct_out[3] = i3_re;
    t0 = 0.9238795325112865 * (i4_re + i4_im);
    t1 = i4_re * (-1.306562964876377);
    t2 = i4_im * 0.5411961001461961;
    i4_re = t0 - t2;
    i4_im = t0 + t1;
    dct_out[12] = -i4_im;
    dct_out[4] = i4_re;
    t0 = 0.8819212643483548 * (i5_re + i5_im);
    t1 = i5_re * (-1.3533180011743529);
    t2 = i5_im * 0.4105245275223569;
    i5_re = t0 - t2;
    i5_im = t0 + t1;
    dct_out[11] = -i5_im;
    dct_out[5] = i5_re;
    t0 = 0.8314696123025452 * (i6_re + i6_im);
    t1 = i6_re * (-1.3870398453221475);
    t2 = i6_im * 0.27589937928294306;
    i6_re = t0 - t2;
    i6_im = t0 + t1;
    dct_out[10] = -i6_im;
    dct_out[6] = i6_re;
    t0 = 0.7730104533627367 * (i7_re + i7_im);
    t1 = i7_re * (-1.4074037375263826);
    t2 = i7_im * 0.13861716919909073;
    i7_re = t0 - t2;
    i7_im = t0 + t1;
    dct_out[9] = -i7_im;
    dct_out[7] = i7_re;
    dct_out[8] = 0.7071067811865476 * i8_re;
    
    return dct_out;
}

/**
 *  Do 16-point Type-II IDCT (not normalized).
 * 
 *  Note(s):
 *    [1] Expected output:
 *        idct_out[n] = sum(k = 0...15, idct_in[k] * cos((2n + 1)kπ / 32))
 *        (where 0 <= n < 16).
 *    [2] In-place transformation is supported.
 * 
 *  @param {Number[]} idct_in
 *    - The input vector.
 *  @param {Number[]} [idct_out]
 *    - The output vector.
 *  @returns {Number[]}
 *    - The output vector.
 */
function DCTIIInverse_16(idct_in, idct_out = new Array(16)) {
    //
    //  This function was generated by our proprietary DCT compiler 
    //  automatically.
    //  Do NOT modified the code manually.
    //
    let i0_re, i10_im, i10_re, i11_im, i11_re, i12_im, i12_re, i13_im, i13_re, i14_im, i14_re, i15_im, i15_re, i1_im, i1_re, i2_im, i2_re, i3_im, i3_re, i4_im, i4_re, i5_im, i5_re, i6_im, i6_re, i7_im, i7_re, i8_re, i9_im, i9_re, t0, t0_i, t0_r, t1, t1_i, t1_r, t2, t2_i, t2_r, t3_i, t3_r;
    i0_re = idct_in[0];
    t0 = idct_in[1];
    i1_re = t0 * 0.9951847266721969;
    i1_im = t0 * (-0.0980171403295606);
    t0 = idct_in[2];
    i2_re = t0 * 0.9807852804032304;
    i2_im = t0 * (-0.19509032201612825);
    t0 = idct_in[3];
    i3_re = t0 * 0.9569403357322088;
    i3_im = t0 * (-0.29028467725446233);
    t0 = idct_in[4];
    i4_re = t0 * 0.9238795325112867;
    i4_im = t0 * (-0.3826834323650898);
    t0 = idct_in[5];
    i5_re = t0 * 0.881921264348355;
    i5_im = t0 * (-0.47139673682599764);
    t0 = idct_in[6];
    i6_re = t0 * 0.8314696123025452;
    i6_im = t0 * (-0.5555702330196022);
    t0 = idct_in[7];
    i7_re = t0 * 0.773010453362737;
    i7_im = t0 * (-0.6343932841636455);
    i8_re = idct_in[8] * 0.7071067811865476;
    t0 = idct_in[9];
    i9_re = t0 * 0.6343932841636455;
    i9_im = t0 * (-0.773010453362737);
    t0 = idct_in[10];
    i10_re = t0 * 0.5555702330196023;
    i10_im = t0 * (-0.8314696123025452);
    t0 = idct_in[11];
    i11_re = t0 * 0.4713967368259978;
    i11_im = t0 * (-0.8819212643483549);
    t0 = idct_in[12];
    i12_re = t0 * 0.38268343236508984;
    i12_im = t0 * (-0.9238795325112867);
    t0 = idct_in[13];
    i13_re = t0 * 0.29028467725446233;
    i13_im = t0 * (-0.9569403357322089);
    t0 = idct_in[14];
    i14_re = t0 * 0.19509032201612833;
    i14_im = t0 * (-0.9807852804032304);
    t0 = idct_in[15];
    i15_re = t0 * 0.09801714032956077;
    i15_im = t0 * (-0.9951847266721968);
    t0_r = i0_re + i8_re;
    t1_r = i4_re + i12_re;
    t2_r = i0_re - i8_re;
    t3_i = i4_im - i12_im;
    i0_re = t0_r + t1_r;
    i4_re = t2_r + t3_i;
    i8_re = t0_r - t1_r;
    i12_re = t2_r - t3_i;
    t0_r = i2_re + i10_re;
    t0_i = i2_im + i10_im;
    t1_r = i6_re + i14_re;
    t1_i = i6_im + i14_im;
    t2_r = i2_re - i10_re;
    t2_i = i2_im - i10_im;
    t3_r = i6_re - i14_re;
    t3_i = i6_im - i14_im;
    i2_re = t0_r + t1_r;
    i6_re = t2_r + t3_i;
    i6_im = t2_i - t3_r;
    i10_im = t0_i - t1_i;
    i14_re = t2_r - t3_i;
    i14_im = t2_i + t3_r;
    t0 = i6_re + i6_im;
    i6_re = t0 * 0.7071067811865476;
    i10_re = i10_im;
    t0 = -i14_re + i14_im;
    i14_re = t0 * 0.7071067811865476;
    t0_r = i2_re;
    i2_re = i4_re;
    i4_re = i8_re;
    i8_re = t0_r;
    t0_r = i6_re;
    i6_re = i12_re;
    i12_re = i10_re;
    i10_re = t0_r;
    t0_r = i0_re;
    t1_r = i8_re;
    i0_re = t0_r + t1_r;
    i8_re = t0_r - t1_r;
    t0_r = i2_re;
    t1_r = i10_re;
    i2_re = t0_r + t1_r;
    i10_re = t0_r - t1_r;
    t0_r = i4_re;
    t1_r = i12_re;
    i4_re = t0_r + t1_r;
    i12_re = t0_r - t1_r;
    t0_r = i6_re;
    t1_r = i14_re;
    i6_re = t0_r + t1_r;
    i14_re = t0_r - t1_r;
    t0_r = i1_re + i9_re;
    t0_i = i1_im + i9_im;
    t1_r = i5_re + i13_re;
    t1_i = i5_im + i13_im;
    t2_r = i1_re - i9_re;
    t2_i = i1_im - i9_im;
    t3_r = i5_re - i13_re;
    t3_i = i5_im - i13_im;
    i1_re = t0_r + t1_r;
    i1_im = t0_i + t1_i;
    i5_re = t2_r + t3_i;
    i5_im = t2_i - t3_r;
    i9_re = t0_r - t1_r;
    i9_im = t0_i - t1_i;
    i13_re = t2_r - t3_i;
    i13_im = t2_i + t3_r;
    t0_r = i3_re + i11_re;
    t0_i = i3_im + i11_im;
    t1_r = i7_re + i15_re;
    t1_i = i7_im + i15_im;
    t2_r = i3_re - i11_re;
    t2_i = i3_im - i11_im;
    t3_r = i7_re - i15_re;
    t3_i = i7_im - i15_im;
    i3_re = t0_r + t1_r;
    i3_im = t0_i + t1_i;
    i7_re = t2_r + t3_i;
    i7_im = t2_i - t3_r;
    i11_re = t0_r - t1_r;
    i11_im = t0_i - t1_i;
    i15_re = t2_r - t3_i;
    i15_im = t2_i + t3_r;
    t0 = i7_re + i7_im;
    t1 = -i7_re + i7_im;
    i7_re = t0 * 0.7071067811865476;
    i7_im = t1 * 0.7071067811865476;
    t0 = i11_re;
    i11_re = i11_im;
    i11_im = -t0;
    t0 = -i15_re + i15_im;
    t1 = -i15_re - i15_im;
    i15_re = t0 * 0.7071067811865476;
    i15_im = t1 * 0.7071067811865476;
    t0_r = i3_re;
    t0_i = i3_im;
    i3_re = i5_re;
    i3_im = i5_im;
    i5_re = i9_re;
    i5_im = i9_im;
    i9_re = t0_r;
    i9_im = t0_i;
    t0_r = i7_re;
    t0_i = i7_im;
    i7_re = i13_re;
    i7_im = i13_im;
    i13_re = i11_re;
    i13_im = i11_im;
    i11_re = t0_r;
    i11_im = t0_i;
    t0_r = i1_re;
    t0_i = i1_im;
    t1_r = i9_re;
    t1_i = i9_im;
    i1_re = t0_r + t1_r;
    i9_im = t0_i - t1_i;
    t0_r = i3_re;
    t0_i = i3_im;
    t1_r = i11_re;
    t1_i = i11_im;
    i3_re = t0_r + t1_r;
    i3_im = t0_i + t1_i;
    i11_re = t0_r - t1_r;
    i11_im = t0_i - t1_i;
    t0_r = i5_re;
    t0_i = i5_im;
    t1_r = i13_re;
    t1_i = i13_im;
    i5_re = t0_r + t1_r;
    i5_im = t0_i + t1_i;
    i13_re = t0_r - t1_r;
    i13_im = t0_i - t1_i;
    t0_r = i7_re;
    t0_i = i7_im;
    t1_r = i15_re;
    t1_i = i15_im;
    i7_re = t0_r + t1_r;
    i7_im = t0_i + t1_i;
    i15_re = t0_r - t1_r;
    i15_im = t0_i - t1_i;
    t0 = 0.9238795325112865 * (i3_re + i3_im);
    t2 = i3_im * 0.5411961001461961;
    i3_re = t0 - t2;
    t0 = i5_re + i5_im;
    i5_re = t0 * 0.7071067811865476;
    t0 = 0.38268343236509 * (i7_re + i7_im);
    t2 = i7_im * (-0.5411961001461967);
    i7_re = t0 - t2;
    i9_re = i9_im;
    t0 = (-0.38268343236509034) * (i11_re + i11_im);
    t2 = i11_im * (-1.3065629648763768);
    i11_re = t0 - t2;
    t0 = -i13_re + i13_im;
    i13_re = t0 * 0.7071067811865476;
    t0 = (-0.9238795325112868) * (i15_re + i15_im);
    t2 = i15_im * (-1.3065629648763766);
    i15_re = t0 - t2;
    t0_r = i1_re;
    i1_re = i2_re;
    i2_re = i4_re;
    i4_re = i8_re;
    i8_re = t0_r;
    t0_r = i3_re;
    i3_re = i6_re;
    i6_re = i12_re;
    i12_re = i9_re;
    i9_re = t0_r;
    t0_r = i5_re;
    i5_re = i10_re;
    i10_re = t0_r;
    t0_r = i7_re;
    i7_re = i14_re;
    i14_re = i13_re;
    i13_re = i11_re;
    i11_re = t0_r;
    t0_r = i0_re;
    t1_r = i8_re;
    i0_re = t0_r + t1_r;
    i8_re = t0_r - t1_r;
    t0_r = i1_re;
    t1_r = i9_re;
    i1_re = t0_r + t1_r;
    i9_re = t0_r - t1_r;
    t0_r = i2_re;
    t1_r = i10_re;
    i2_re = t0_r + t1_r;
    i10_re = t0_r - t1_r;
    t0_r = i3_re;
    t1_r = i11_re;
    i3_re = t0_r + t1_r;
    i11_re = t0_r - t1_r;
    t0_r = i4_re;
    t1_r = i12_re;
    i4_re = t0_r + t1_r;
    i12_re = t0_r - t1_r;
    t0_r = i5_re;
    t1_r = i13_re;
    i5_re = t0_r + t1_r;
    i13_re = t0_r - t1_r;
    t0_r = i6_re;
    t1_r = i14_re;
    i6_re = t0_r + t1_r;
    i14_re = t0_r - t1_r;
    t0_r = i7_re;
    t1_r = i15_re;
    i7_re = t0_r + t1_r;
    i15_re = t0_r - t1_r;
    idct_out[0] = i0_re;
    idct_out[1] = i15_re;
    idct_out[2] = i1_re;
    idct_out[3] = i14_re;
    idct_out[4] = i2_re;
    idct_out[5] = i13_re;
    idct_out[6] = i3_re;
    idct_out[7] = i12_re;
    idct_out[8] = i4_re;
    idct_out[9] = i11_re;
    idct_out[10] = i5_re;
    idct_out[11] = i10_re;
    idct_out[12] = i6_re;
    idct_out[13] = i9_re;
    idct_out[14] = i7_re;
    idct_out[15] = i8_re;

    return idct_out;
}

//  Exported public APIs.
module.exports = {
    "DCTIIForward_16": DCTIIForward_16,
    "DCTIIInverse_16": DCTIIInverse_16
};